<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unity3D-屏幕UI箭头指引3D物体</title>
      <link href="/2019/09/24/Unity3D-%E5%B1%8F%E5%B9%95UI%E7%AE%AD%E5%A4%B4%E6%8C%87%E5%BC%953D%E7%89%A9%E4%BD%93/"/>
      <url>/2019/09/24/Unity3D-%E5%B1%8F%E5%B9%95UI%E7%AE%AD%E5%A4%B4%E6%8C%87%E5%BC%953D%E7%89%A9%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h3 id="我们最终要实现是效果是根据cube在不同位置，箭头有不同的指引效果"><a href="#我们最终要实现是效果是根据cube在不同位置，箭头有不同的指引效果" class="headerlink" title="我们最终要实现是效果是根据cube在不同位置，箭头有不同的指引效果"></a>我们最终要实现是效果是根据cube在不同位置，箭头有不同的指引效果</h3><pre><code>1.在屏幕中间，箭头停留在cube正上方2.在屏幕四周，箭头停留在cube附件3.在屏幕外面，箭头在屏幕边缘指引cube</code></pre><p><img src="img.png" alt="效果图"></p><h4 id="实现箭头指引，如果是3D物体我们可以直接用transform-LookAt-。因为箭头是UI在屏幕上，Transform-LookAt-是使Z轴看向目标，而2D基本是由X和Y轴构成的。所以在2D中，没办法直接使用这个函数。因此，我们需要实现一个2D的LookAt-函数"><a href="#实现箭头指引，如果是3D物体我们可以直接用transform-LookAt-。因为箭头是UI在屏幕上，Transform-LookAt-是使Z轴看向目标，而2D基本是由X和Y轴构成的。所以在2D中，没办法直接使用这个函数。因此，我们需要实现一个2D的LookAt-函数" class="headerlink" title="实现箭头指引，如果是3D物体我们可以直接用transform.LookAt()。因为箭头是UI在屏幕上，Transform.LookAt()是使Z轴看向目标，而2D基本是由X和Y轴构成的。所以在2D中，没办法直接使用这个函数。因此，我们需要实现一个2D的LookAt()函数"></a>实现箭头指引，如果是3D物体我们可以直接用<code>transform.LookAt()</code>。因为箭头是UI在屏幕上，<code>Transform.LookAt()</code>是使Z轴看向目标，而2D基本是由X和Y轴构成的。所以在2D中，没办法直接使用这个函数。因此，我们需要实现一个2D的<code>LookAt()</code>函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private Quaternion lookat2D(Vector3 self,Vector3 Targer) //实现2dlookat</span><br><span class="line">    &#123;</span><br><span class="line">        Vector2 direction = Targer - self;</span><br><span class="line">        //以弧度为单位计算并返回 y/x 的反正切值。返回值表示相对直角三角形对角的角，其中 x 是临边边长，而 y 是对边边长。</span><br><span class="line">        //返回值是在x轴和一个二维向量开始于0个结束在(x,y)处之间的角。</span><br><span class="line">        float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;</span><br><span class="line">        //计算角度返回                                                                    </span><br><span class="line">        return Quaternion.AngleAxis(angle, Vector3.forward);</span><br></pre></td></tr></table></figure><h4 id="实现箭头指引后，我们还需要确定箭头应该摆在上面位置，在不同区域，有不同的摆放位置，我们先区分出不同的区域。cam-WorldToViewportPoint-函数可以得到3D物体在屏幕中的比例位置，返回值是0-1之间就是在屏幕内，反之在屏幕外。"><a href="#实现箭头指引后，我们还需要确定箭头应该摆在上面位置，在不同区域，有不同的摆放位置，我们先区分出不同的区域。cam-WorldToViewportPoint-函数可以得到3D物体在屏幕中的比例位置，返回值是0-1之间就是在屏幕内，反之在屏幕外。" class="headerlink" title="实现箭头指引后，我们还需要确定箭头应该摆在上面位置，在不同区域，有不同的摆放位置，我们先区分出不同的区域。cam.WorldToViewportPoint()函数可以得到3D物体在屏幕中的比例位置，返回值是0-1之间就是在屏幕内，反之在屏幕外。"></a>实现箭头指引后，我们还需要确定箭头应该摆在上面位置，在不同区域，有不同的摆放位置，我们先区分出不同的区域。<code>cam.WorldToViewportPoint()</code>函数可以得到3D物体在屏幕中的比例位置，返回值是0-1之间就是在屏幕内，反之在屏幕外。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void getZone() //得到cube在屏幕的那一区域</span><br><span class="line">    &#123;</span><br><span class="line">        //得到cube在屏幕坐标中的比例坐标 范围是 0-1；</span><br><span class="line">        TargerPosition = Camera.main.WorldToViewportPoint(targer.transform.position);   </span><br><span class="line">        if (TargerPosition.x &gt;= 0.2 &amp;&amp; TargerPosition.x &lt;= 0.8 &amp;&amp; TargerPosition.y &gt;= 0.2 &amp;&amp; TargerPosition.y &lt;= 0.8) zone = 1; //在中间</span><br><span class="line">        else if (TargerPosition.x &lt; 0 || TargerPosition.x &gt; 1 || TargerPosition.y &lt; 0 || TargerPosition.y &gt; 1) zone = 3; //在屏幕外</span><br><span class="line">        else zone = 2;  // 在四周</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="确定区域后，在根据不同的区域进行不同的处理，这里看下面完整的代码"><a href="#确定区域后，在根据不同的区域进行不同的处理，这里看下面完整的代码" class="headerlink" title="确定区域后，在根据不同的区域进行不同的处理，这里看下面完整的代码"></a>确定区域后，在根据不同的区域进行不同的处理，这里看下面完整的代码</h4><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class ArrowAt : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    public Transform targer;</span><br><span class="line">    Vector3 TargerPosition;</span><br><span class="line">    int zone = 1;</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        targer = GameObject.Find(&quot;Cube&quot;).transform;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        getZone();</span><br><span class="line"></span><br><span class="line">        if (zone == 1)</span><br><span class="line">        &#123;</span><br><span class="line">            //得到cube在在屏幕的坐标</span><br><span class="line">            TargerPosition = Camera.main.WorldToScreenPoint(targer.transform.position);</span><br><span class="line">            //箭头设置成这个坐标的上面</span><br><span class="line">            this.transform.position = new Vector3(TargerPosition.x, TargerPosition.y + 100, 0f); </span><br><span class="line">        &#125;</span><br><span class="line">        else if (zone == 2)</span><br><span class="line">        &#123;</span><br><span class="line">            int tmpx = 0, tmpy = 0;</span><br><span class="line">            //判断cube在屏幕的左右</span><br><span class="line">            if (TargerPosition.x &gt; 0.5) tmpx = -50; else tmpx = 50;</span><br><span class="line">            //判断cube在屏幕的上下</span><br><span class="line">            if (TargerPosition.y &gt; 0.5) tmpy = -50; else tmpy = 50;</span><br><span class="line">            //得到cube在在屏幕的坐标</span><br><span class="line">            TargerPosition = Camera.main.WorldToScreenPoint(targer.transform.position);</span><br><span class="line">            //箭头设置cube附近</span><br><span class="line">            this.transform.position = new Vector3(TargerPosition.x + tmpx, TargerPosition.y + tmpy, 0f);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (zone == 3)</span><br><span class="line">        &#123;</span><br><span class="line">            TargerPosition = Camera.main.WorldToScreenPoint(targer.transform.position);</span><br><span class="line">            //限制箭头不超出屏幕的左右</span><br><span class="line">            TargerPosition.x = Mathf.Clamp(TargerPosition.x, 50, Screen.width - 50);</span><br><span class="line">            //限制箭头不超出屏幕的上下</span><br><span class="line">            TargerPosition.y = Mathf.Clamp(TargerPosition.y, 50, Screen.height - 50);       </span><br><span class="line">            this.transform.position = new Vector3(TargerPosition.x, TargerPosition.y, 0f);</span><br><span class="line">        &#125;</span><br><span class="line">        //取得世界坐标物体在屏幕上的投影坐标</span><br><span class="line">        Vector3 screenTarger = Camera.main.WorldToScreenPoint(targer.position);</span><br><span class="line">        //得到箭头的指向角度</span><br><span class="line">        transform.rotation = lookat2D(transform.position, screenTarger);        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void getZone() //得到cube在屏幕的那一区域</span><br><span class="line">    &#123;</span><br><span class="line">        //得到cube在屏幕坐标中的比例坐标 范围是 0-1；</span><br><span class="line">        TargerPosition = Camera.main.WorldToViewportPoint(targer.transform.position);   </span><br><span class="line">        if (TargerPosition.x &gt;= 0.2 &amp;&amp; TargerPosition.x &lt;= 0.8 &amp;&amp; TargerPosition.y &gt;= 0.2 &amp;&amp; TargerPosition.y &lt;= 0.8) zone = 1; //在中间</span><br><span class="line">        else if (TargerPosition.x &lt; 0 || TargerPosition.x &gt; 1 || TargerPosition.y &lt; 0 || TargerPosition.y &gt; 1) zone = 3; //在屏幕外</span><br><span class="line">        else zone = 2;  // 在四周</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Quaternion lookat2D(Vector3 self,Vector3 Targer) //实现2dlookat</span><br><span class="line">    &#123;</span><br><span class="line">        Vector2 direction = Targer - self;</span><br><span class="line">        //以弧度为单位计算并返回 y/x 的反正切值。返回值表示相对直角三角形对角的角，其中 x 是临边边长，而 y 是对边边长。</span><br><span class="line">        //返回值是在x轴和一个二维向量开始于0个结束在(x,y)处之间的角。</span><br><span class="line">        float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;</span><br><span class="line">        //计算角度返回                                                                    </span><br><span class="line">        return Quaternion.AngleAxis(angle, Vector3.forward);                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>- 参考资料  https://blog.csdn.net/iov3Rain/article/details/85165183]]></content>
      
      
      <categories>
          
          <category> Uinty3D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 箭头指引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是一篇测试文章</title>
      <link href="/2019/09/23/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/2019/09/23/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="123"><a href="#123" class="headerlink" title="123"></a>123</h1><h2 id="456"><a href="#456" class="headerlink" title="456"></a>456</h2>]]></content>
      
      
      <categories>
          
          <category> Uinty3D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Saoki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/23/hello-world/"/>
      <url>/2019/09/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
